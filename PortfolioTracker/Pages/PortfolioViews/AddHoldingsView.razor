@using PortfolioTracker.Services
@using PortfolioTracker.ViewModels
@using PortfolioTracker.Database.DataModels

@inject IStockDataService StockDataService

<RadzenButton ButtonStyle="ButtonStyle.Light" class="btnSmall" Click="@InsertRow"> Add <RadzenIcon Icon="add_circle_outline" Style="color:dimgrey; font-size:medium" /></RadzenButton>

<RadzenGrid @ref="stocksGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Single"
            Data="@holdings" TItem="Equity" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenGridColumn Width="200px" TItem="Equity" Property="Symbol" Title="Ticker">
            <EditTemplate Context="equity">
                <RadzenTextBox @bind-Value="equity.Symbol" Style="width:100%" />
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn Width="150px" TItem="Equity" Property="Quantity" Title="Quantity">
            <EditTemplate Context="equity">
                <RadzenNumeric TValue="float" @bind-Value="equity.Quantity" Style="width:100%" />
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn Width="200px" TItem="Equity" Property="CostPerShare" Title="Price per Share">
            <EditTemplate Context="equity">
                <RadzenNumeric TValue="double" @bind-Value="equity.CostPerShare" Style="width:100%" />
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="Equity" Context="EditSaveCloseContext" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="equity">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(equity))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="equity">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(equity))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(equity))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Equity" Context="order" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="equity">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(equity))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="equity">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(equity))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@code {
    private IList<Equity> holdings;
    RadzenGrid<Equity> stocksGrid;

    protected override async Task OnInitializedAsync()
    {
    }

    private async void GetStockData(string ticker)
    {
        Quote stockInfo = await StockDataService.GetStockDataAsync(ticker);
    }

    void EditRow(Equity equity)
    {
        stocksGrid.EditRow(equity);
    }

    void SaveRow(Equity equity)
    {
        stocksGrid.UpdateRow(equity);
    }

    void CancelEdit(Equity equity)
    {
        stocksGrid.CancelEditRow(equity);
    }

    void DeleteRow(Equity equity)
    {
        if (holdings.Contains(equity))
        {
            //dbContext.Remove<Order>(stock);

            // For demo purposes only
            holdings.Remove(equity);

            // For production
            //dbContext.SaveChanges();

            stocksGrid.Reload();
        }
        else
        {
            stocksGrid.CancelEditRow(equity);
        }
    }

    void InsertRow()
    {
        stocksGrid.InsertRow(new Equity());
    }

    void OnCreateRow(Equity equity)
    {
        //    dbContext.Add(order);

        //    // For demo purposes only
        //    order.Customer = dbContext.Customers.Find(order.CustomerID);
        //    order.Employee = dbContext.Employees.Find(order.EmployeeID);

        //    // For production
        //    //dbContext.SaveChanges();
    }

    void OnUpdateRow(Equity equity)
    {
        //    dbContext.Update(order);

        //    // For demo purposes only
        //    order.Customer = dbContext.Customers.Find(order.CustomerID);
        //    order.Employee = dbContext.Employees.Find(order.EmployeeID);

        //    // For production
        //    //dbContext.SaveChanges();
    }
}
